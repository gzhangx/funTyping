{"version":3,"sources":["components/keyHandler.js","components/handleTyppingState.js","components/getVerses.js","App.js","serviceWorker.js","index.js"],"names":["KeyHandler","cb","useState","keyPressed","setKeyPressed","useEffect","onKeyDown","key","window","addEventListener","removeEventListener","letterMatch","getInitState","curText","badText","toText","wordEnds","nextCharPos","startTime","wordCount","wordCountChangeTime","Date","count","allDone","getRandomNumber","max","min","parseInt","Math","random","timerCb","setTimeout","wpmTim","App","useReducer","state","action","dispatch","slice","keyHandler","length","pop","position","push","toString","match","doStateHandling","wpm","setWpm","elaspedTime","setElaspedTime","getTime","now","started","className","style","onClick","console","log","str","from","verses","map","s","replace","getVerses","join","toFixed","reduce","acc","c","j","ret","color","textDecorationLine","type","text","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cffa745d.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nconst KeyHandler = cb => {\r\n    const [keyPressed, setKeyPressed] = useState();\r\n    useEffect(() => {\r\n      const onKeyDown = ({ key }) => {\r\n          setKeyPressed(key);\r\n          if (cb) cb(key);\r\n      };\r\n      window.addEventListener('keydown', onKeyDown);\r\n  \r\n      return () => {\r\n        window.removeEventListener('keydown', onKeyDown);\r\n      };\r\n    });\r\n    return keyPressed;\r\n  };\r\n  \r\n  export default KeyHandler;","import keyHandler from './keyHandler';\r\nconst letterMatch = /^[A-Za-z0-9]$/;\r\n\r\nexport function doStateHandling(state, dispatch) {\r\n    let nextCharPos = state.nextCharPos;\r\n  let wordCount = state.wordCount;  \r\n  let count = state.count;\r\n  let allDone = state.allDone;\r\n  const curText = state.curText.slice();\r\n  const badText = state.badText.slice();\r\n  const wordEnds = state.wordEnds;\r\n  let wordCountChangeTime = state.wordCountChangeTime;\r\n  keyHandler(key => { \r\n    if (nextCharPos >= state.toText.length) return;\r\n    if (key ==='Backspace') {\r\n      if (nextCharPos=== curText.length) {\r\n        if (nextCharPos > 0) nextCharPos--;\r\n      }\r\n      curText.pop();\r\n      badText.pop();\r\n      \r\n      while (wordEnds.length) {\r\n        if (wordEnds[wordEnds.length - 1].position >= nextCharPos) {\r\n          wordEnds.pop();\r\n        }\r\n        else \r\n          break;\r\n      }\r\n      if (wordCount !== wordEnds.length) {\r\n        wordCountChangeTime = new Date();\r\n      }\r\n      wordCount = wordEnds.length;\r\n      count = count+1;\r\n    }else {\r\n      if (key.length > 1)return;\r\n      if (nextCharPos < state.toText.length) {\r\n        if (key === state.toText[nextCharPos] && nextCharPos=== curText.length) {\r\n          nextCharPos++;\r\n        } else {\r\n          badText.push(key);\r\n        }\r\n        \r\n        if (key.toString().match(letterMatch) && nextCharPos > 0) {\r\n          if (nextCharPos >= state.toText.length || !state.toText[nextCharPos].match(letterMatch)) {\r\n            wordEnds.push({\r\n              count: wordCount,\r\n              position: nextCharPos - 1,\r\n            });\r\n            if (wordCount !== wordEnds.length) {\r\n              wordCountChangeTime = new Date();\r\n            }\r\n            wordCount = wordEnds.length;\r\n          }\r\n        }\r\n        \r\n      }\r\n      if (nextCharPos >= state.toText.length) {\r\n        allDone = true;\r\n      }\r\n      curText.push(key);\r\n      count = count+1;\r\n    }\r\n    dispatch(state=>{     \r\n      return ({\r\n        ...state,\r\n        nextCharPos,\r\n        startTime: nextCharPos === 1 ? new Date() : state.startTime,\r\n        curText,\r\n        badText,\r\n        wordCount,\r\n        wordCountChangeTime,\r\n        count,\r\n        allDone,\r\n      });\r\n    });    \r\n  });  \r\n}\r\n\r\nexport function getInitState() {\r\n    return {\r\n      curText: [],\r\n      badText: [],\r\n      toText:[],\r\n      wordEnds: [],\r\n      nextCharPos: 0,\r\n      startTime: null,\r\n      wordCount: 0,\r\n      wordCountChangeTime: new Date(),\r\n      count : 0,\r\n      allDone: false,\r\n    }\r\n  }\r\n\r\n","import verses from './verses.json';\r\n\r\nfunction getRandomNumber(max, min=0) {\r\n    return parseInt((Math.random() * (max - min)) + min);\r\n}\r\nexport default function getVerses(max=3) {\r\n    let from = getRandomNumber(verses.length-max);\r\n    return verses.slice(from, from+ max).map(s=>s.replace(/’/g,'\\'').replace(/”/g,'\"'));\r\n}","import React , { useReducer, useState } from 'react';\r\nimport './App.css';\r\n//import request from 'superagent';\r\n\r\nimport {getInitState, doStateHandling} from './components/handleTyppingState';\r\nimport getVerses from './components/getVerses';\r\n\r\nconst timerCb = {\r\n  cb : null,\r\n}\r\nconst wpmTim = ()=>{\r\n  if (timerCb.cb) timerCb.cb();\r\n  setTimeout(wpmTim, 200);\r\n};\r\nsetTimeout(wpmTim, 100);\r\n\r\nfunction App() {\r\n  const [state, dispatch] = useReducer((state,action)=>action(state), getInitState());\r\n  doStateHandling(state, dispatch);  \r\n\r\n  const {count, allDone} = state;\r\n  const [wpm, setWpm] = useState(0);\r\n  const [elaspedTime, setElaspedTime] = useState(0);\r\n  //const wpm = state.wordCount === 0 ? 0 : state.wordCount/(state.wordCountChangeTime.getTime() - state.startTime.getTime())*1000*60;  \r\n\r\n  timerCb.cb = () =>{\r\n    if (state.wordCount > 0) {\r\n      if (!state.allDone)\r\n        setWpm(state.wordCount/(state.wordCountChangeTime.getTime() - state.startTime.getTime())*1000*60);    \r\n    }\r\n    if (state.startTime) {\r\n      if (!state.allDone)\r\n        setElaspedTime(Date.now()-state.startTime.getTime());\r\n    }else setElaspedTime(0);\r\n  }\r\n\r\n  const started = count > 0;\r\n  const initButtonStyle = {};  \r\n\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">    \r\n      {(!started || allDone)?\r\n      <button  style={initButtonStyle} onClick={()=>{        \r\n        console.log('========================= INIT ===========================');\r\n        //const verses = request.get('https://bible-api.com/romans%202').then(res=>{\r\n        //  return res.body.verses.map(r=>r.text.trim().replace(/“/g,'\"').replace(/’/g,'\\''));\r\n        // }).then(r=>{\r\n        //  console.log(r);\r\n        //})        \r\n        const str = getVerses(10).join(' ');\r\n        //const str = 'The quick brown fox jump over the something something new; and let\\'s play somethig cool!';\r\n        dispatch(state=>({\r\n          ...getInitState(),\r\n          toText: [...str],\r\n        }));        \r\n      }}>Start Test</button>    :null\r\n    }\r\n        \r\n        <p>Words: {state.wordCount}  WPM: {wpm.toFixed(2)} Seconds: { (elaspedTime/1000).toFixed(1)}</p>\r\n        <p>\r\n          {\r\n            state.toText.reduce((acc, c, j) => {\r\n              const ret = <span key={j} style={{ color: j >= state.nextCharPos ? 'yellow' : 'black', textDecorationLine: j >= state.nextCharPos ? '' : 'line-through' }}>{c}</span>\r\n              if (j === state.nextCharPos && state.badText.length) {\r\n                acc.push(<span key={j+\"bad\"} style={{ color: 'red', textDecorationLine: 'line-through' }}>{state.badText.join('')}</span>)\r\n              }\r\n              acc.push(ret);\r\n              return acc;\r\n            },[])\r\n        }\r\n        </p>        \r\n        <div>        \r\n          <input type='text' text={state.curText.join('')}></input>\r\n        {\r\n          false && state.curText.map((c,i)=><span key={i}>\r\n            {c}\r\n          </span>\r\n            \r\n          )\r\n        }\r\n      </div>\r\n      </header>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}